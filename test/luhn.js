'use strict';
const assert = require('assert').strict;
const common = require('./common');
const algo = require('..').luhn;

describe('Luhn algorithm', () => {
  // {{{ List sample strings
  const valid = [
    // short cases
    ['6392838428', '639283842', '8'],
    ['6121688052', '612168805', '2'],
    ['9248001704', '924800170', '4'],
    ['4271763072', '427176307', '2'],
    ['9169125045', '916912504', '5'],
    ['3858339744', '385833974', '4'],
    ['6039761306', '603976130', '6'],
    ['7884147302', '788414730', '2'],

    // leading zeros
    ['006392838428', '00639283842', '8'],
    ['006121688052', '00612168805', '2'],
    ['009248001704', '00924800170', '4'],
    ['004271763072', '00427176307', '2'],
    ['00009169125045', '0000916912504', '5'],
    ['00003858339744', '0000385833974', '4'],
    ['00006039761306', '0000603976130', '6'],
    ['00007884147302', '0000788414730', '2'],

    // special characters
    ['6-39-28-38428', '6-39-28-3842', '8'],
    ['61 216 88 052', '61 216 88 05', '2'],
    ['X92-4800170ABC4', 'X92-4800170ABC', '4'],
    ['  4271  7630 7 2', '  4271  7630 7 ', '2'],

    // large
    ['3376893546118112789115841911189412691086037650', '337689354611811278911584191118941269108603765', '0'],
    ['4258184707858608072651591977459052874031809715', '425818470785860807265159197745905287403180971', '5'],
    ['5641025207262236983056258592719326376834268565', '564102520726223698305625859271932637683426856', '5'],
    ['5789797459025821354417756382533697166210040512', '578979745902582135441775638253369716621004051', '2'],

    // bulk
    ['79927398713', '7992739871', '3'],
    ['49927398716', '4992739871', '6'],
    ['1234567812345670', '123456781234567', '0'],
    ['4024007199952671', '402400719995267', '1'],
    ['4968009448991185', '496800944899118', '5'],
    ['4485031936696447520', '448503193669644752', '0'],
    ['2720991026808100', '272099102680810', '0'],
    ['5313977435287891', '531397743528789', '1'],
    ['5144122279996944', '514412227999694', '4'],
    ['345624181492183', '34562418149218', '3'],
    ['379723913300158', '37972391330015', '8'],
    ['345999017580637', '34599901758063', '7'],
    ['6011232699595685', '601123269959568', '5'],
    ['6011491169622003', '601149116962200', '3'],
    ['6011285697355763491', '601128569735576349', '1'],
    ['3542720990091367', '354272099009136', '7'],
    ['3532233574622997', '353223357462299', '7'],
    ['3532788220114354666', '353278822011435466', '6'],
    ['5403399339551671', '540339933955167', '1'],
    ['5585760385211280', '558576038521128', '0'],
    ['5481899719102875', '548189971910287', '5'],
    ['30540557891578', '3054055789157', '8'],
    ['30071210433038', '3007121043303', '8'],
    ['30126773590440', '3012677359044', '0'],
    ['36300226927160', '3630022692716', '0'],
    ['36462605784370', '3646260578437', '0'],
    ['36705219593581', '3670521959358', '1'],
    ['6763637858365987', '676363785836598', '7'],
    ['6762136018635356', '676213601863535', '6'],
    ['6762285720444928', '676228572044492', '8'],
    ['4175003833113538', '417500383311353', '8'],
    ['4917845148786751', '491784514878675', '1'],
    ['4508189071154330', '450818907115433', '0'],
    ['6397642356831336', '639764235683133', '6'],
    ['6379177784930725', '637917778493072', '5'],
    ['6371983222326360', '637198322232636', '0'],
  ];

  const invalid = [
    '6392838421',
    '6121688059',
    '9248001707',
    '4271763075',
    '9169125042',
    '3858339745',
    '6039761304',
    '7884147301',
  ];
  // }}}

  common.testAlgo(algo, valid, invalid);

  describe('luhn.validate()', () => {
    it('accepts Number type as argument', () => {
      const shortCases = valid.slice(0, 16);
      for (const [num, src, cc] of shortCases) {
        assert.ok(algo.validate(Number(num)), `validate(Number(${num})`);
      }
    });
  });
});

// vim: fdm=marker fmr&
